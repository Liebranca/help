#!/usr/bin/perl

# ---   *   ---   *   --- +
# HELP                    |
# makes help messages     |

# LIBRE SOFTWARE          |
# Licensed under GNU GPL3 |
# be a bro and inherit    |

# CONTRIBUTORS            |
# lyeb,                   |

# ---   *   ---   *   --- +

# deps
  use strict;
  use warnings;

  use lib glob $ENV{'ARPATH'}.'/lib/';
  
  use cash;
  use avt;

# ---   *   ---   *   ---
# info

  use constant {  
    VERSION   =>  "0.2b"

  };

# ---   *   ---   *   ---
# global storage

  my %CACHE=(
    -USE_COLOR  =>      1,
    -OPTS       =>      0,

  );

# ---   *   ---   *   ---

# flippers
sub sw_col {$CACHE{-USE_COLOR}=0;};

# print helpme
sub help {

  my @header=(
    "help <flags> <usage> <description> <'opt0'> <'d0'> ... <'optN'> <'dN'>",
    
    "Formats (usage,description), then an (option,description) pair-list".
    " to fit within screen width as returned by stty size."

    .'$:parg;>'.
    
    "Redirecting help into a file let's you print the message through cat",

  );

  my @OPTS=@{ $CACHE{-OPTS} };
  
  if(!$CACHE{-USE_COLOR}) {
    unshift @header,'--ugly';

  };
  
  system './help',(@header,@OPTS);
  
  exit;

# print version info
};sub version {
  print avt::version(
    'help',VERSION,
    'IBN-3DILA',
    
  );exit;

};

# ---   *   ---   *   ---

# det N chars to allocate per field
sub gen_fields {

  # get console size in chars
  my ($y,$x)=cash::tty_sz;

  my $header='%-'.($x-4).'s'."\n";

  # generate template
  my $n_field;  
  my $d_field;{

    # set sizes according to screen  
    my $d_sz=int($x/1.5)-8;
    my $n_sz=$x-$d_sz-12;

    # string paste
    $n_field='%-'.($n_sz).'s';
    $d_field='%-'.($d_sz).'s'."\n";

  };return ($header,$n_field,$d_field);

};

# ---   *   ---   *   ---

# opts=(name,desc...) pair list
# cut provided opts so they format wrap
sub parse_opts {

  my @opts=@ARGV;
  my ($header,$n_field,$d_field)=gen_fields;

  $header=~ m/%-([\d]+)s/;my $h_space=$1;

  # cut the header
  my @header;{

    my $u="USAGE: ".( shift @opts );
    
    my $sub=1;while($sub) {
      ($sub,$u)=cash::wrap_word($u,$h_space);
      if(!$sub) {last;}
    
      push @header,$sub;
    };push @header,$u;push @header,'';

# ---   *   ---   *   ---

    # description can be many paragraphs...
    my @d=split '\$:parg;>',shift @opts;
    
    while(@d) {
      my $d=shift @d;
      
      $sub=1;while($sub) {
        ($sub,$d)=cash::wrap_word($d,$h_space);
        if(!$sub) {last;}
      
        push @header,$sub;
      };push @header,$d;
      
      if(@d) {push @header,' ';}
      
    };

  };

# ---   *   ---   *   ---

  $n_field=~ m/%-([\d]+)s/;my $n_space=$1;
  $d_field=~ m/%-([\d]+)s/;my $d_space=$1;

  my @lines=();my ($x,$y)=(0,0);
  my ($sz_x,$sz_y)=(0,0);

  # iter through pairs
  while(@opts) {
    my $n=shift @opts;
    my $d=shift @opts;

    $lines[$x][$y][0]='';
    $lines[$x][$y][1]='';$y=0;

    # cut name string into lines
    my $sub=1;while($sub) {
      ($sub,$n)=cash::wrap_word($n,$n_space);
      if(!$sub) {last;}
      
      $lines[$x][$y][0]=$sub;
      $y++;

    };$lines[$x][$y][0]=$n;

# ---   *   ---   *   ---

    # now cut description
    my $i=0;
    $y=0;$sub=1;while($sub) {
      $i++;($sub,$d)=cash::wrap_word($d,$d_space);
      if(!$sub) {last;}

      $lines[$x][$y][1]=$sub;$y++;
      $sz_y+=$y>=$sz_y;

    };$lines[$x][$y][1]=$d;$y++;
    if($i>1) { $lines[$x][$y][1]=' '; }
    
    $x++;$sz_x++;$sz_y=($y>$sz_y) ? $y : $sz_y;

  };

  return (
    \@header,
    \@lines,
    
    $sz_x,$sz_y,

    $header,
    (' 'x2).$n_field.(' 'x4).$d_field);

};

# ---   *   ---   *   ---

# single arg=parsed opts array
# outs file with format print
sub make_format {

  my (
    $header_ref,
    $lines_ref,

    $sz_x,$sz_y,

    $header_format,
    $line_format

  )=@_;
  
  my @header=@{ $header_ref };
  my @lines=@{ $lines_ref };

# ---   *   ---   *   ---

  # iter lines
  my @lines_flat=();
  for(my $x=0;$x<$sz_x;$x++) {
    for(my $y=0;$y<=$sz_y;$y++) {

      # blank name & desc
      if(!$lines[$x][$y][0] && !$lines[$x][$y][1]) {
        next;

      };

      # only one is blank, still need it for padding
      if   (!$lines[$x][$y][0]) {$lines[$x][$y][0]='';}
      elsif(!$lines[$x][$y][1]) {$lines[$x][$y][1]='';};

      push @lines_flat,$lines[$x][$y][0];
      push @lines_flat,$lines[$x][$y][1];

    };
  };


# ---   *   ---   *   ---

  my $result_f;
  my @result_v;

  # compose the header string  
  { my $color=($CACHE{-USE_COLOR})
      ? ( cash::pex_col '8A')
      : ''
      ;
      
    my $hed_f="\n".$color;

    # get first line...
    my $hed_v='';
    my $desc_part=0;

    # then get the rest
    while(@header) {

      my $s=shift @header;

      # indent the description      
      if($s eq '') {
        $header_format='  '.$header_format;
        $color=($CACHE{-USE_COLOR})
          ? ( cash::pex_col '07' )
          : ''
          ;
        
        $desc_part=1;
        $s="\e[2K";

      };

      # cat format and values
      $hed_f.=$color.$header_format;        
      push @result_v,$s;
      
    };$result_f=$hed_f;

  };

# ---   *   ---   *   ---

  # compose the opt-lines
  { my $color=($CACHE{-USE_COLOR})
      ? cash::pex_col '8A'
      : ''
      ;

    $header_format=cash::ltrim($header_format);
    my $opt_f="\n".$color.$header_format;
    
    push @result_v,'OPTIONS';
    push @result_v,"\e[2K";

    $color=($CACHE{-USE_COLOR})
      ? cash::pex_col '07'
      : ''
      ;

    $opt_f.=$color.$header_format;
    
    while(@lines_flat) {
      my $s1=shift @lines_flat;
      my $s2=shift @lines_flat;
      
      $opt_f.=$line_format;
      push @result_v,$s1;
      push @result_v,$s2;
      
    };$result_f.=$opt_f;

  };return ($result_f,\@result_v);

};

# ---   *   ---   *   ---
# arg handler

# list+hash for checking passed options
my @OPTS=(    
    '-h,--help'    ,'Have help call itself to generate this very message',
    '-v,--version' ,'Print version info and exit',
    '-u,--ugly'    ,'Do not generate colorizing escapes',

# make hash{opt}=function
);my %OPTS;{
  my @op_calls=(\&help,\&version,\&sw_col);
  %OPTS=%{ cash::mcalltab(\@OPTS,\@op_calls) };

  $CACHE{-OPTS}=\@OPTS;

};

# ---   *   ---   *   ---

# no args provided
if(!@ARGV) {
  help;

# normal call
};while(@ARGV && grep m/${ ARGV[0] }/,keys %OPTS) {
  my $opt=shift;  
  $OPTS{$opt}->();
  
};

# ---   *   ---   *   ---

if(@ARGV && !(@ARGV%2)) {
  my @ar=parse_opts();
  my @helpme=make_format @ar;
  my $format=shift @helpme;
  my @vars=@{ shift @helpme };
  
  print sprintf "$format",@vars;
  
} else {help;};

# ---   *   ---   *   ---
1; # ret
